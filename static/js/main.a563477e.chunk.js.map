{"version":3,"sources":["public/create.svg","public/upload.svg","public/search.svg","public/album-icon.svg","public/photo-icon.svg","public/share-icon.svg","components/Album.js","components/Header.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Album","useState","photos","setPhotos","useEffect","axios","get","then","response","map","image","prevState","sort","a","b","Date","created_at","className","length","key","id","src","urls","small","alt","alt_description","Header","Search","type","placeholder","Create","Upload","Sidebar","Photo","Share","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,yMCwB5BC,MArBf,WAAkB,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACFC,EADE,KAcf,OAZFC,qBAAU,WACNC,IAAMC,IAAI,8HAA8HC,MAAK,SAACC,GAC9IA,EAAQ,KAASC,KAAI,SAACC,GACdP,GAAU,SAAAQ,GAAS,4BAAMA,GAAN,CAAiBD,OACpCP,GAAU,SAAAQ,GAAS,OAAEA,EAAUC,MAAK,SAASC,EAAEC,GAC3C,OAAO,IAAIC,KAAKF,EAAEG,YAAY,IAAID,KAAKD,EAAEE,0BAKtD,IAGC,yBAAKC,UAAU,mBACZf,EAAOgB,OAAOhB,EAAOO,KAAI,SAACC,GAAD,OAAS,yBAAKS,IAAKT,EAAMU,GAAIH,UAAU,aAAaI,IAAKX,EAAMY,KAAKC,MAAOC,IAAKd,EAAMe,qBAAqB,O,mDCQ5HC,MArBf,WACE,OACE,yBAAKT,UAAU,UACX,0BAAMA,UAAU,mBACZ,8BACI,yBAAKI,IAAKM,IAAQV,UAAU,cAAcO,IAAI,YAElD,2BAAQI,KAAK,OAAOC,YAAY,qBAAqBZ,UAAU,eAErE,8BACI,yBAAKI,IAAKS,IAAQb,UAAU,eAAeO,IAAI,YAEnD,0BAAMP,UAAU,qBAAhB,UACA,8BACI,yBAAKI,IAAKU,IAAQd,UAAU,eAAeO,IAAI,YAEnD,0BAAMP,UAAU,qBAAhB,Y,mDCISe,MApBf,WAEE,OACE,yBAAKf,UAAU,WACb,8BACI,yBAAKI,IAAKY,IAAOhB,UAAU,gBAAgBO,IAAI,WAEnD,0BAAMP,UAAU,sBAAhB,UACA,8BACI,yBAAKI,IAAKrB,IAAOiB,UAAU,gBAAgBO,IAAI,WAEnD,0BAAMP,UAAU,sBAAhB,UACA,8BACI,yBAAKI,IAAKa,IAAOjB,UAAU,gBAAgBO,IAAI,WAEnD,0BAAMP,UAAU,sBAAhB,WCLSkB,MAVf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.a563477e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/create.478887b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.04dcba43.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.a87eca9e.svg\";","module.exports = __webpack_public_path__ + \"static/media/album-icon.d1218363.svg\";","module.exports = __webpack_public_path__ + \"static/media/photo-icon.c195fcb7.svg\";","module.exports = __webpack_public_path__ + \"static/media/share-icon.0060a704.svg\";","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Album() {\nconst [photos, setPhotos]=useState([]);\nuseEffect(()=>{\n    axios.get('https://api.unsplash.com/photos/random?count=30&client_id=eabab3af0950e1039a56eac39d421af54bf8c9156b61333cbe93c7160c768d6d').then((response)=>{    \n    response['data'].map((image)=>{\n            setPhotos(prevState=>[...prevState, image])\n            setPhotos(prevState=>prevState.sort(function(a,b){\n                return new Date(a.created_at)-new Date(b.created_at)\n            }))\n        })\n    })\n\n}, [])\n\n  return (\n    <div className=\"image-container\">\n      {photos.length?photos.map((image)=><img key={image.id} className=\"image-view\" src={image.urls.small} alt={image.alt_description} />):null}\n    </div>\n  );\n}\n\nexport default Album;","import React from 'react';\nimport Create from '../public/create.svg';\nimport Upload from '../public/upload.svg';\nimport Search from '../public/search.svg';\n\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n        <span className='input-container'>\n            <span>\n                <img src={Search} className='search-icon' alt='Search'/>\n            </span>\n            <input  type='text' placeholder='Search your photos' className='input-box' />\n        </span>\n      <span>\n          <img src={Create} className='header-icons' alt='create' />\n      </span>\n      <span className='header__icon-name'>Create</span>\n      <span>\n          <img src={Upload} className='header-icons' alt='upload'/>\n      </span>\n      <span className='header__icon-name'>Upload</span>\n    </div>\n  );\n}\n\nexport default Header;","\nimport React from 'react';\nimport Album from '../public/album-icon.svg'\nimport Photo from '../public/photo-icon.svg'\nimport Share from '../public/share-icon.svg'\n\nfunction Sidebar() {\n\n  return (\n    <div className=\"sidebar\">\n      <span>\n          <img src={Photo} className='sidebar-icons' alt='click'/ >\n      </span>\n      <span className='sidebar__icon-name'>Photos</span>\n      <span>\n          <img src={Album} className='sidebar-icons' alt='album'/>\n      </span>\n      <span className='sidebar__icon-name'>Albums</span>\n      <span>\n          <img src={Share} className='sidebar-icons' alt='share'/>\n      </span>\n      <span className='sidebar__icon-name'>Share</span>\n    </div>\n  );\n}\n\nexport default Sidebar;","import React from 'react';\nimport './App.css';\nimport Album from './components/Album'\nimport Header from './components/Header'\nimport Sidebar from './components/Sidebar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Album />\n      <Sidebar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}